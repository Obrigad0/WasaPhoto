openapi: 3.0.3
info:
  title: WasaPhoto API
  description: |
    Questa API permette agli utenti 
    l'utilizzo di tutti i servizi offerti dal sito
    WasaPhoto.
  version: 1.0.2

tags: 
  - name: "login"
    description: Gestione del login
  - name: "user"
    description: Gestione servizi utente
  - name: "banned"
    description: Gestione ban dell'utente
  - name: "following"
    description: Gestione following dell'utente
  - name: "images"
    description: Gestione immagini dell'utente
  - name: "comment"
    description: Gestione dei commenti delle immagini dell'utente
  - name: "like"
    description: Gestione dei like delle immagini dell'utente

components: 
    schemas:
      #
      user:
        title: User structure
        description: "Questo oggetto rappresenta un singolo utente"
        type: object
        properties:      
          name:
            description: Username dell'utente
            type: string
            pattern: '^.*?$'
            example: LikeMrSarri
            minLength: 3
            maxLength: 16
          userId:
            description: Identificatore univoco dell'utente
            type: integer
            example: 71
          follower:
            description: Array di identificatori di utenti che seguono questo utente
            type: array
            minItems: 0
            maxItems: 9999
            items: 
              type: integer
          following:
            description: Array di identificatori di utenti che questo utente segue
            type: array
            minItems: 0
            maxItems: 9999
            items: 
              type: integer
          banList:
            description: Array di identificatori di utenti che questo utente ha bloccato
            type: array
            minItems: 0
            maxItems: 9999
            items: 
              type: integer
      #
      image:
        title: Image structure
        description: "Questo oggetto rappresenta una singola immagine"
        type: object
        properties:
          imgId: 
            description: Identificatore univoco dell'immagine
            type: integer
            example: 71
          file:
            description: Il file che rappresenta l'immagine
            type: string
            minLength: 0
            maxLength: 10000
            format: binary
          descrizione: 
            description: Descrizione scritta dall'utente che ha postato l'immagine
            type: string
            pattern: '^.*?$'
            minLength: 0
            maxLength: 280
            example: foto al mare! hashtag odioIlMare
          like:
            description: Array di identificatori di utenti che hanno messo like alla foto
            type: array
            minItems: 0
            maxItems: 9999
            items: 
              type: integer
          comments:
            description: Array di identificatori di utenti che hanno commentato la foto e il loro commento
            type: array
            minItems: 0
            maxItems: 9999
            items:
              type: object
              properties:
                idComment:
                  description: id del commento
                  type: integer
                  example: 71
                text:
                  type: string
                  description: testo del commento
                  pattern: '^.*?$'
                  minLength: 1
                  maxLength: 80
                  example: bella foto!
                commenter:
                  description: utente che ha commentato
                  type: integer
          author:
            description: Identificatore utente che ha postato la foto
            type: integer
            example: 71
          data:
            description: Data e istante di caricamento dell'immagine
            type: string
            format: date-time
            example: 2013-05-26T19:27:26Z
            #Bosniaco
      #      
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer      

paths:
  #
  /user/{idUser}:

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260513

    put: 
      summary: Modifica nome utente
      description: l'operazione consente la modifica del nome utente 
      tags: ["user"]
      operationId: setMyUserName
      requestBody:
        content: 
          application/json: 
            schema: 
              description: nuovo nome utente
              type: string
              pattern: '^.*?$'
              example: LikeMrSarri2
              minLength: 3
              maxLength: 16
              
      responses: 
        "204":
          description: Successo, user name modificato
        "400":
          description: Errore, nome inserito non valido
        "401":
          description: Utente non autorizzato all'operazion o token mancante
        "404":
          description: Errore, utente non trovato!

      security:
        - bearerAuth: []

    get:
      summary: Ritorna il profilo utente
      description: l'operazione ritorna tutte le informazioni del profilo dell'utente 
      tags: ["user"]
      operationId: getUserProfile
      responses: 
        "200":
          description: Successo, ricevuto l' object che rappresenta l'utente.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/user"
        "401":
          description: Utente non autorizzato all'operazion o token mancante
        "404":
          description: Errore, utente non trovato!
        "500":
          description: Errore interno al server!

      security:
        - bearerAuth: []


  #  
  /user/{idUser}/following/:  #con o senza / finale

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260513/following/

    get:
      summary: stream following utente
      description: l'operazione ritorna in un array tutti i followed dell'utente e le loro ultime foto, in modo tale da creare il suo stream
      tags: ["following"]
      operationId: getMyStream
      responses:
        "200":
          description: Successo, ricevuto tutti i following dell'utente e le immagini.
          content:
            application/json:
              schema:
                description: array contentente l'utente e la sua ultima immagine caricata              
                type: array
                minItems: 0
                maxItems: 999
                items:
                  type: object
                  properties:
                      utente:
                        $ref: "#/components/schemas/user"
                      ultimaImmagine:
                        $ref: "#/components/schemas/image"

      
      security:
        - bearerAuth: []

  #
  /user/{idUser}/following/{followedUserId}: 

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260513/following/xxx


    - name: followedUserId
      in: path
      required: true
      description: id dell'utente seguito
      schema:
        type: integer
        description: es /user/260513/following/150519


    delete:
      summary: unfollow di un utente
      description: l'operazione elimina il followedUserId dall'array di seguiti dell'utente
      tags: ["following"]
      operationId: unfollowUser
      responses:
        "204":
          description: "Successo, utente non pi√π seguito"
        "404":
          description: Errore, utente non trovato!
      security:
        - bearerAuth: []

    put:
      summary: follow di un utente
      description: l'operazione aggiunge il followedUserId dall'array di seguiti dell'utente
      tags: ["following"]
      operationId: followUser
      responses:
        "204":
          description: Successo, utente seguito.
        "400":
          description: Errore, non puoi seguire te stesso!
        "401":
          description: Errore, non autorizzato!
        "404":
          description: Errore, utente non trovato!
        "500":
          description: Errore, c'e' un ban tra i due utenti o errore del db!
      security:
        - bearerAuth: []

  #
  /user/{idUser}/banned/: #con o senza / finale

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260513/banned/


    get:
      summary: Utenti bloccati dall'utente
      description: l'operazione ritorna in un array la tutti gli utenti bloccati dall'utente
      tags: ["banned"]
      operationId: getMyBanList
      responses:
        "200":
          description: Successo, ricevuto la lista degli utenti bloccati
          content:
            application/json:
              schema:
                description: array di utenti bloccati
                type: array
                minItems: 0
                maxItems: 999
                items:
                  $ref: "#/components/schemas/user"
        "401":
          description: Errore, non autorizzato!
        "500":
          description: Errore, c'e' un errore con il db!
      security:
        - bearerAuth: []

  #
  /user/{idUser}/banned/{bannedUserId}:
    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260513/banned/xxx


    - name: bannedUserId
      in: path
      required: true
      description: id dell'utente bannato
      schema:
        type: integer
        description: es /user/260513/banned/150519

    
    put:
      summary: Ban di un utente
      description: l'operazione inserisce il bannedUserId dall'array dei bannati dell'utente
      tags: ["banned"]
      operationId: banUser
      responses:
        "204":
          description: "Successo, utente aggiunto alla ban list"
        "401":
          description: Errore, non autorizzato!
        "404":
          description: Errore, utente non trovato!
        "500":
          description: Errore, c'e' un errore con il db!
      security:
        - bearerAuth: []

    delete:
      summary: unBan di un utente
      description: l'operazione elimina il bannedUserId dall'array dei bannati dell'utente
      tags: ["banned"]
      operationId: unbanUser
      responses:
        "204": 
          description: "Successo, utente rimosso dalla ban list"
        "401":
          description: Errore, non autorizzato!
        "404":
          description: Errore, utente non trovato!
        "500":
          description: Errore, c'e' un errore con il db!
      security:
        - bearerAuth: []



  #
  /user/{idUser}/images: #con o senza / finale
    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/ads34f/images


    post: #il server deve creare l'id dell'immagine
      summary: Upload di un immagine
      description: l'operazione carica l'immagine inserita dall'utente
      tags: ["images"]
      operationId: uploadPhoto
      requestBody: 
        content: 
          multipart/form-data:
            schema:
              description: object contentente file binario e descrizione aggiunta dall'utente
              type: object
              properties:
                file:
                  description: Il file che rappresenta l'immagine
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 10000
                descrizione:
                  description: Descrizione immagine
                  type: string
                  pattern: '^.*?$'
                  minLength: 0
                  maxLength: 280
      responses:
        "202":
          description: "Successo, richiesta accettata dal server"
        "401":
          description: Errore, non autorizzato!
        "500":
          description: Errore, c'e' un errore con il db!
      security:
        - bearerAuth: []

  /user/{idUser}/images/{imageId}:
    parameters: 
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer
          description: es /user/260519/images/xxx


      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: integer
          description: es /user/260519/images/234234
    
    delete:
      summary: Rimozione di un immagine
      description: elimina l'immagine imageId dell'utente
      tags: ["images"]
      operationId: deletePhoto
      responses:
        "204":
          description: Successo, immagine eliminata
        "401":
          description: Errore, non autorizzato!
        "404":
          description: Errore, immagine non trovata!
        "500":
          description: Errore, c'e' un errore con il db!
      security:
        - bearerAuth: []

    get:
      summary: Accesso ad un'immagine
      description: ritorna l'immagine imageId dell'utente
      tags: ["images"]
      operationId: getTheImage
      responses:
        "200":
          description: Successo, accesso all'immagine 
          content: 
            application/json:
              schema:
                description: oggetto contenete l'immagine e gli altri dati dell'immagine
                type: object
                properties:
                  file:
                    description: immagine ritornata
                    type: string
                    format: binary
                    minLength: 0
                    maxLength: 10000
                  info:
                    $ref: "#/components/schemas/image"
        "401":
          description: Errore, non autorizzato!
        "404":
          description: Errore, immagine non trovata!
        "500":
          description: Errore, c'e' un errore con il db!
      security:
        - bearerAuth: []

  #
  /user/{idUser}/images/{imageId}/like/: #con o senza / finale
    parameters:
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260519/images/xxx/like/

    - name: imageId
      in: path
      required: true
      description: id dell'immagine
      schema:
        type: integer
        description: es /user/260519/images/234342344/like/

    get:
      summary: Lista degli utenti che hanno messo like alla foto
      description: ritorna la lista degli utenti che hanno messo like alla foto imageId
      tags: ["like"]
      operationId: getMyLike
      responses:
        "200":
          description: Successo, ricevuto la lista degli utenti che hanno messo like!
          content:
            application/json:
              schema:
                description: array di utenti
                type: array
                minItems: 0
                maxItems: 999
                items:
                  $ref: "#/components/schemas/user"
      security:
        - bearerAuth: []

  /user/{idUser}/images/{imageId}/like/{likeUserId}:
    parameters:
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer
          description: es /user/260519/images/xxx/like/xxx


      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: integer
          description: es /user/260519/images/234234234/like/xxx

      - name: likeUserId
        in: path
        required: true
        description: id dell'utente che mette like
        schema:
          type: integer
          description: es /user/260519/images/g324gsd/like/234234


    put:
      summary: inserimento dell'utente nella lista dei like della foto
      description: inserisce nell'array dei like della foto (imageId) likeUserId
      tags: ["like"]      
      operationId: likePhoto
      responses:
        "204":
          description: "Successo, utente aggiunto alla lista dei like della foto"
        "404":
          description: Errore, utente non trovato!
      security:
        - bearerAuth: []

    delete:
      summary: rimozione dell'utente nella lista dei like della foto
      description: elimina nell'array dei like della foto (imageId) likeUserId
      tags: ["like"]      
      operationId: unlikePhoto
      responses:
        "204":
          description: "Successo, utente eliminato dalla lista dei like della foto"
        "404":
          description: Errore, utente non trovato!
      security:
        - bearerAuth: []


  #
  /user/{idUser}/images/{imageId}/comments/: #con o senza / finale
    parameters:
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer
          description: es /user/2334423/images/xxx/comments/

      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: integer
          description: es /user/2334423/images/345345345/comments/

    get:
      summary: Lista degli utenti e dei commenti lasciati sotto la foto
      description: ritorna in un array la lista degli utenti e dei commenti lasciati sotto la foto
      tags: ["comment"]
      operationId: getMyComments
      responses:
        "200":
          description: Successo, ricevuto la lista degli utenti che hanno messo like!
          content:
            application/json:
              schema:
                description: array contenente  l'id del commento il testo del commento e l'autore del commento, della foto richiesta
                type: array
                minItems: 0
                maxItems: 999
                items:
                  type: object
                  properties:
                    idComment:
                      description: id del commento
                      type: integer
                      example: 234234234
                    text:
                      description: testo del commento
                      type: string
                      pattern: '^.*?$'
                      minLength: 1
                      maxLength: 80
                      example: bella foto!
                    commenter:
                      description: utente che ha commentato
                      type: integer
                      example: 234234234
      security:
        - bearerAuth: []
    
    post:  # il server deve creare l'id del commento
      summary: inserimento del commento 
      description: invia al server il commento e l'utente che ha commentato la foto, post perche' il server crea l'id del commento
      tags: ["comment"]
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema: 
              description: testo del commento
              type: object
              properties:
                text:
                  description: testo del commento
                  type: string
                  pattern: '^.*?$'
                  minLength: 1
                  maxLength: 80
                  example: bella foto!
      responses:
        "202":
          description: "Successo, richiesta accettata dal server"
      security:
        - bearerAuth: []


  /user/{idUser}/images/{imageId}/comments/{commentId}:
    parameters:
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer
          description: es /user/2334423/images/xxx/comments/xxx

      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: integer
          description: es /user/2334423/images/234234234/comments/4234234

      - name: commentId
        in: path
        required: true
        description: id del commento
        schema:
          type: integer
          description: es /user/2334423/images/234234234/comments/4234234

    delete:
      summary: rimozione dell'utente nella lista dei commenti della foto
      description: elimina nell'array dei commenti della foto (imageId) commentId
      tags: ["comment"]
      operationId: uncommentPhoto
      responses:
        "204":
          description: "Successo, commento eliminato dalla foto"
      security:
        - bearerAuth: []

  #
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: accede al servizio
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: login
              type: object
              properties:
                name:   
                  description: nome dell'utente per il login
                  type: string
                  example: mariaa
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:   
            application/json:
              schema: 
                description: id utente 
                type: integer
        "400":
          description: Errore, il contenuto inviato non e' valido!
        "500":
          description: Errore, problema interno al db!


                    
                  
        
      