openapi: 3.0.3
info:
  title: WasaPhoto API
  description: |
    Questa API permette agli utenti 
    l'utilizzo di tutti i servizi offerti dal sito
    WasaPhoto.
  version: 0.0.5

components: 
    schemas:
      #
      user:
        title: User structure
        description: "Questo oggetto rappresenta un singolo utente"
        type: object
        properties:      
          name:
            description: Username dell'utente
            type: string
          id:
            description: Identificatore univoco dell'utente
            type: integer
            example: 71
          follower:
            description: Array di identificatori di utenti che seguono questo utente
            type: array
            items: 
              type: integer
          following:
            description: Array di identificatori di utenti che questo utente segue
            type: array
            items: 
              type: integer
          banList:
            description: Array di identificatori di utenti che questo utente ha bloccato
            type: array
            items: 
              type: integer
      #
      image:
        title: Image structure
        description: "Questo oggetto rappresenta una singola immagine"
        type: object
        properties:
          id: 
            description: Identificatore univoco dell'immagine
            type: string
            example: Lu71c
          file:
            description: Il file che rappresenta l'immagine
            type: string
            format: binary
          descrizione: 
            description: Descrizione scritta dall'utente che ha postato l'immagine
            type: string
          like:
            description: Array di identificatori di utenti che hanno messo like alla foto
            type: array
            items: 
              type: integer
          comments:
            description: Array di identificatori di utenti che hanno commentato la foto e il loro commento
            type: array
            items:
              type: object
              properties:
                idComment:
                  type: string
                text:
                  type: string
                commenter:
                  type: integer
          author:
            description: Identificatore utente che ha postato la foto
            type: integer
            example: 71
          

paths:
  #
  /user/{idUser}:

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer
        description: es /user/260513

    put: 
      summary: Modifica o Primo inserimento nome utente
      tags: ["user"]
      operationId: setMyUserName
      requestBody:
        content: 
          application/json: 
            schema: 
              type: string
      responses: 
        "201":
          description: Successo, user name modificato.    

    get:
      summary: Ritorna il profilo utente
      tags: ["user"]
      operationId: getUserProfile
      responses: 
        "200":
          description: Successo, ricevuto l' object che rappresenta l'utente.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/user"
        "404":
          description: Errore, utente non trovato!


  #  
  /user/{idUser}/following/:  #con o senza / finale

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer

    get:
      summary: stream following utente
      tags: ["following"]
      operationId: getMyStream
      responses:
        "200":
          description: Successo, ricevuto tutti i following dell'utente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"

  #
  /user/{idUser}/following/{followedUserId}: 

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer

    - name: followedUserId
      in: path
      required: true
      description: id dell'utente seguito
      schema:
        type: integer

    delete:
      summary: unfollow di un utente
      tags: ["following"]
      operationId: unfollowUser
      responses:
        "200":
          description: "Successo, utente non pi√π seguito"

    put:
      summary: follow di un utente
      tags: ["following"]
      operationId: followUser
      responses:
        "201":
          description: Successo, utente seguito.
        "404":
          description: Errore, utente non trovato!

  #
  /user/{idUser}/banned/: #con o senza / finale

    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer

    get:
      summary: Utenti bloccati dall'utente
      tags: ["banned"]
      operationId: getMyBanList
      responses:
        "200":
          description: Successo, ricevuto la lista degli utenti bloccati
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"

  #
  /user/{idUser}/banned/{bannedUserId}:
    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer

    - name: bannedUserId
      in: path
      required: true
      description: id dell'utente bannato
      schema:
        type: integer
    
    put:
      summary: Ban di un utente
      tags: ["banned"]
      operationId: banUser
      responses:
        "201":
          description: "Successo, utente aggiunto alla ban list"
        "404":
          description: Errore, utente non trovato!

    delete:
      summary: unBan di un utente
      tags: ["banned"]
      operationId: unbanUser
      responses:
        "200": 
          description: "Successo, utente rimosso dalla ban list"



  #
  /user/{idUser}/images: #con o senza / finale
    parameters: 
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer

    post:
      summary: Upload di un immagine
      tags: ["images"]
      operationId: uploadPhoto
      requestBody: 
        content: 
          application/json: 
            schema:
              $ref: "#/components/schemas/image"
      responses:
        "201":
          description: Successo, immagine caricata

  /user/{idUser}/images/{imageId}:
    parameters: 
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer

      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: string
    
    delete:
      summary: Rimozione di un immagine
      tags: ["images"]
      operationId: deletePhoto
      responses:
        "200":
          description: Successo, immagine eliminata

    get:
      summary: Accesso ad un'immagine
      tags: ["images"]
      operationId: getTheImage
      responses:
        "201":
          description: Successo, accesso all'immagine 

  #
  /user/{idUser}/images/{imageId}/like/: #con o senza / finale
    parameters:
    - name: idUser
      in: path
      required: true
      description: id dell'utente della pagina visitata
      schema:
        type: integer

    - name: imageId
      in: path
      required: true
      description: id dell'immagine
      schema:
        type: string

    get:
      summary: Lista degli utenti che hanno messo like alla foto
      tags: ["like"]
      operationId: getMyLike
      responses:
        "200":
          description: Successo, ricevuto la lista degli utenti che hanno messo like!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"

  /user/{idUser}/images/{imageId}/like/{likeUserId}:
    parameters:
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer

      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: string

      - name: likeUserId
        in: path
        required: true
        description: id dell'utente che mette like
        schema:
          type: integer


    put:
      summary: inserimento dell'utente nella lista dei like della foto
      tags: ["like"]      
      operationId: likePhoto
      responses:
        "201":
          description: "Successo, utente aggiunto alla lista dei like della foto"

    delete:
      summary: rimozione dell'utente nella lista dei like della foto
      tags: ["like"]      
      operationId: unlikePhoto
      responses:
        "200":
          description: "Successo, utente eliminato dalla lista dei like della foto"


  #
  /user/{idUser}/images/{imageId}/comments/: #con o senza / finale
    parameters:
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer

      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: string

    get:
      summary: Lista degli utenti e dei commenti lasciati sotto la foto
      tags: ["comment"]
      operationId: getMyComments
      responses:
        "200":
          description: Successo, ricevuto la lista degli utenti che hanno messo like!
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    idComment:
                      type: string
                    text:
                      type: string
                    commenter:
                      type: integer
    
    post:  # il server deve creare l'id del commento
      summary: inserimento del commento 
      tags: ["comment"]
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                Commenter:
                  type: integer
                text:
                  type: string
      responses:
        "201":
          description: "Successo, utente inserito dalla lista dei commenti della foto"


  /user/{idUser}/images/{imageId}/comments/{commentId}:
    parameters:
      - name: idUser
        in: path
        required: true
        description: id dell'utente della pagina visitata
        schema:
          type: integer

      - name: imageId
        in: path
        required: true
        description: id dell'immagine
        schema:
          type: string

      - name: commentId
        in: path
        required: true
        description: id del commento
        schema:
          type: string

    delete:
      summary: rimozione dell'utente nella lista dei commenti della foto
      tags: ["comment"]
      operationId: uncommentPhoto
      responses:
        "200":
          description: "Successo, commento eliminato dalla foto"

  #
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:   
                  type: string
                  example: Maria
                  pattern: 'ÀÜ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:   
            application/json:
              schema: 
                type: integer


                    
                  
        
      